"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const process = __importStar(require("process"));
const core = __importStar(require("@actions/core"));
const exec = __importStar(require("@actions/exec"));
const common = __importStar(require("./msdo-common"));
const installer = __importStar(require("./msdo-installer"));
const AdmZip = require("adm-zip");
const cliVersionDefault = 'Latest';
function setupEnvironment() {
    return __awaiter(this, void 0, void 0, function* () {
        console.log('------------------------------------------------------------------------------');
        if (!process.env.MSDO_FILEPATH) {
            let cliVersion = resolveCliVersion();
            yield installer.install(cliVersion);
        }
        process.env.GDN_SETTINGS_FOLDERS = `Install=${process.env.MSDO_PACKAGES_DIRECTORY}`;
        console.log('------------------------------------------------------------------------------');
    });
}
function resolveCliVersion() {
    let cliVersion = cliVersionDefault;
    if (process.env.MSDO_VERSION) {
        cliVersion = process.env.MSDO_VERSION;
    }
    if (cliVersion.includes('*')) {
        cliVersion = 'Latest';
    }
    return cliVersion;
}
function getCliFilePath() {
    let cliFilePath = process.env.MSDO_FILEPATH;
    core.debug(`cliFilePath = ${cliFilePath}`);
    return cliFilePath;
}
function init() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            let cliFilePath = getCliFilePath();
            yield exec.exec(cliFilePath, ['init', '--force']);
        }
        catch (error) {
            core.debug(error);
        }
    });
}
function run(inputArgs, telemetryEnvironment = 'github') {
    return __awaiter(this, void 0, void 0, function* () {
        let cliFilePath = null;
        let args = [];
        let debugDrop = common.parseBool(process.env.GDN_DEBUG_DROP);
        const gdnTaskLibFolder = path.resolve(__dirname);
        core.debug(`gdnTaskLibFolder = ${gdnTaskLibFolder}`);
        const nodeModulesFolder = path.dirname(path.dirname(gdnTaskLibFolder));
        core.debug(`nodeModulesFolder = ${nodeModulesFolder}`);
        const taskFolder = path.dirname(nodeModulesFolder);
        core.debug(`taskFolder = ${taskFolder}`);
        const debugFolder = path.join(taskFolder, 'debug');
        core.debug(`debugFolder = ${debugFolder}`);
        try {
            yield setupEnvironment();
            yield init();
            cliFilePath = process.env.MSDO_FILEPATH;
            core.debug(`cliFilePath = ${cliFilePath}`);
            if (inputArgs != null) {
                for (let i = 0; i < inputArgs.length; i++) {
                    args.push(inputArgs[i]);
                }
            }
            args.push('--not-break-on-detections');
            if (core.isDebug()) {
                args.push('--logger-level');
                args.push('trace');
            }
            let sarifFile = path.join(process.env.GITHUB_WORKSPACE, '.gdn', 'msdo.sarif');
            core.debug(`sarifFile = ${sarifFile}`);
            core.exportVariable('MSDO_SARIF_FILE', sarifFile);
            core.setOutput('sarifFile', sarifFile);
            if (common.isVersionGreaterThanOrEqualTo(process.env.MSDO_INSTALLEDVERSION, '0.183.0')) {
                args.push('--export-file');
            }
            else {
                args.push('--export-breaking-results-to-file');
            }
            args.push(sarifFile);
            args.push('--telemetry-environment');
            args.push(telemetryEnvironment);
            core.debug(`GdnDebugDrop = ${debugDrop}`);
            if (debugDrop) {
                args.push('--debug-drop');
                args.push('--debug-drop-path');
                args.push(debugFolder);
                const debugFolderEnvVarName = `GDN_DEBUGDROPPATH`;
                core.debug(`Debug Drop enabled. ${debugFolderEnvVarName}: ${debugFolder}`);
                process.env[debugFolderEnvVarName] = debugFolder;
            }
        }
        catch (error) {
            core.error('Exception occurred while initializing MSDO:');
            core.error(error);
            core.setFailed(error);
            return;
        }
        try {
            core.debug('Running Microsoft Security DevOps...');
            cleanupDirectory(debugFolder);
            yield exec.exec(cliFilePath, args);
            let debugStagingDir = '';
            core.debug(`GdnDebugDrop = ${debugDrop}`);
            if (debugDrop) {
                if (fs.existsSync(debugFolder)) {
                    core.debug("Creating debug drop archive...");
                    let zippedOutput = getZippedFolder(debugFolder);
                    const instanceDirectory = process.env.GITHUB_WORKSPACE;
                    debugStagingDir = path.join(instanceDirectory, '.gdn', 'debugdrop');
                    if (!fs.existsSync(debugStagingDir)) {
                        core.debug(`Creating missing folder: ${debugStagingDir}`);
                        fs.mkdirSync(debugStagingDir);
                    }
                    let debugDropArtifact = path.join(debugStagingDir, `MSDO_debug.zip`);
                    let dupeCount = 1;
                    while (fs.existsSync(debugDropArtifact)) {
                        core.debug(`Debug Drop with the name ${debugDropArtifact} already exists, updating name to avoid collision...`);
                        dupeCount += 1;
                        debugDropArtifact = path.join(debugStagingDir, `MSDO_debug_${dupeCount}.zip`);
                    }
                    fs.copyFileSync(zippedOutput, debugDropArtifact);
                    core.debug(`Finished creating: ${debugDropArtifact}`);
                    core.debug(`DebugDrop = ${debugStagingDir}`);
                    core.exportVariable('MSDO_DEBUG_DROP_FOLDER', debugStagingDir);
                    core.setOutput('debugDrop', debugStagingDir);
                    core.debug(`Cleaning up: ${debugFolder}`);
                    cleanupDirectory(debugFolder);
                    core.debug(`Successfully cleaned up debug dump.`);
                }
            }
        }
        catch (error) {
            core.setFailed(error);
            return;
        }
    });
}
exports.run = run;
function getZippedFolder(dir) {
    core.debug(`Zipping up folder: ${dir}`);
    let allPaths = getFilePathsRecursively(dir);
    const zip = new AdmZip();
    for (let filePath of allPaths) {
        core.debug(`Adding file to archive: ${filePath}`);
        zip.addLocalFile(filePath);
    }
    let destPath = `${dir}.zip`;
    core.debug(`Writing to file: ${destPath}`);
    zip.writeZip(destPath);
    if (fs.existsSync(destPath)) {
        core.debug(`Successfully wrote file: ${destPath}`);
    }
    else {
        core.debug(`Something went wrong! File does not exist: ${destPath}`);
    }
    return destPath;
}
function getFilePathsRecursively(dir) {
    core.debug(`Searching for files under dir: ${dir}`);
    var files = [];
    let fileList = fs.readdirSync(dir);
    var remaining = fileList.length;
    if (!remaining)
        return files;
    for (let file of fileList) {
        file = path.resolve(dir, file);
        let stat = fs.statSync(file);
        if (stat && stat.isDirectory()) {
            let f = getFilePathsRecursively(file);
            files = files.concat(f);
        }
        else {
            files.push(file);
        }
        if (!--remaining) {
            return files;
        }
    }
}
function cleanupDirectory(dir) {
    if (!fs.existsSync(dir))
        return;
    let items = fs.readdirSync(dir);
    for (let item of items) {
        item = path.resolve(dir, item);
        let stat = fs.statSync(item);
        if (stat && stat.isDirectory()) {
            cleanupDirectory(item);
        }
        else {
            fs.unlinkSync(item);
        }
    }
    fs.rmdirSync(dir);
}
